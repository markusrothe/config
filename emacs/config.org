Some config items are taken from https://raw.githubusercontent.com/jamiecollinson/dotfiles/master/config.org

* Setup
** Configure package sources

Add repositories from which we'll load packages. I prefer to live on the bleeding edge so have only enabled melpa. Setting =package-enable-at-startup= to =nil= prevents a second package load and slightly improves startup time.
 
#+BEGIN_SRC emacs-lisp
  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (setq package-enable-at-startup nil)
#+END_SRC

** Bootstrap use-package
If =use-package= is not installed, install it

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (setq use-package-verbose t)
  (require 'use-package)
  (setq load-prefer-newer t)
#+END_SRC

All packages should be installed via the package manager. 
This is equivalent to setting =:ensure t= on each call to =use-package=

#+BEGIN_SRC emacs-lisp
  (setq use-package-always-ensure t)
#+END_SRC

** Make it easy to find and edit this file via "C-c I"
#+BEGIN_SRC emacs-lisp
  (defun find-config ()
    "Edit config.org"
    (interactive)
    (find-file "~/dotfiles/emacs/config.org"))

  (global-set-key (kbd "C-c I") 'find-config)
#+END_SRC

** Set custom settings to load in own file

This stops emacs adding customised settings to =init.el=.
Avoid using customize anyway, preferring programmatic control of variables.
Creating it as a temporary file effectively disables it (i.e. any changes are session local).

#+BEGIN_SRC emacs-lisp
  (setq custom-file (make-temp-file "emacs-custom"))
#+END_SRC
* Preferences
** Don't display the help screen on startup.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC

** Turn off unwanted window decoration.

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC

** Disable the error bell

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC

** Make the =yes or no= prompts shorter.

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Backup file creation options

A common frustration with new Emacs users is the =filename#= files created. This centralises the backup files created as you edit.

#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
        backup-by-copying t    ; Don't delink hardlinks
        version-control t      ; Use version numbers on backups
        delete-old-versions t  ; Automatically delete excess backups
        kept-new-versions 20   ; how many of the newest versions to keep
        kept-old-versions 5    ; and how many of the old
        )
#+END_SRC
** Start in Fullscreen
#+BEGIN_SRC emacs-lisp
(add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC
* Interface
** Command completion
=ivy= is a generic completion framework which uses the minibuffer. Turning on =ivy-mode= enables replacement of lots of built in =ido= functionality.

#+BEGIN_SRC emacs-lisp
  (use-package ivy
      :diminish ivy-mode
      :config
      (ivy-mode t))
#+END_SRC

By default =ivy= starts filters with =^=. I don't normally want that and can easily type it manually when I do.

#+BEGIN_SRC emacs-lisp
  (setq ivy-initial-inputs-alist nil)
#+END_SRC

** Better searching
Use ag for searches
#+BEGIN_SRC emacs-lisp
  (use-package ag)
#+END_SRC

Use swiper to improve on =isearch=
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :config
    (global-set-key "\C-s" 'swiper))
#+END_SRC

Use counsel-ag for fast grep inside a project
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :config
    (counsel-mode)
    (global-set-key (kbd "C-c k") 'counsel-ag))
#+END_SRC

** Dired mode
#+BEGIN_SRC emacs-lisp
      (setq dired-dwim-target t)
      (use-package dired-rainbow)
      (use-package dired-hacks-utils)
      (use-package dired-collapse
        :config
        (add-hook 'dired-mode-hook 'dired-collapse-mode)
        )
#+END_SRC
* Appearance

I'm now using my own translation of Panda Theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC

Highlight the current line.

#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Show line numbers

#+BEGIN_SRC emacs-lisp
  (global-display-line-numbers-mode 1)
#+END_SRC

Leerzeichen mode shows tabs, spaces and newlines

#+BEGIN_SRC emacs-lisp
  (use-package leerzeichen
    :config
    (leerzeichen-mode))
#+END_SRC

* Coding
** Programming specific interface improvements

Highlight parens etc. for improved readability.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC

Highlight strings which represent colours. I only want this in programming modes, and I don't want colour names to be highlighted (=x-colors=).

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :config
    (setq rainbow-x-colors nil)
    (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

Keep things indented correctly for me.

#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent)
  (setq tab-width 4)
  (setq-default tab-width 4)
#+END_SRC

Smart dash guesses _ vs - depending on context.

#+BEGIN_SRC emacs-lisp
  (use-package smart-dash
    :config
    (add-hook 'python-mode-hook 'smart-dash-mode))
#+END_SRC

** Project management

Projectile handles folders which are in version control.

#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :config
    (projectile-mode))
#+END_SRC

Tell projectile to integrate with =ivy= for completion.

#+BEGIN_SRC emacs-lisp
  (setq projectile-completion-system 'ivy)
#+END_SRC

Enable caching for large files

#+BEGIN_SRC emacs-lisp
  (setq projectile-enable-caching t)
#+END_SRC

Set Keybinding for finding files in a project and switching between related files
(for example .h/.cpp files)

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-o") 'projectile-find-file)
  (global-set-key (kbd "C-c o") 'projectile-find-other-file)
#+END_SRC

** Git
Magit is an awesome interface to git. Summon it with `C-x g`.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

TimeMachine lets us step through the history of a file as recorded in git.

#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine)
#+END_SRC

** Syntax checking
=Flycheck= is a general syntax highlighting framework which other packages hook into. It's an improvment on the built in =flymake=.

#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (setq-default flycheck-highlighting-mode 'lines)
    ;; Define fringe indicator / warning levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info))
    #+END_SRC

** Autocomplete

Company mode provides good autocomplete options. Perhaps I should add company-quickhelp for documentation (https://github.com/expez/company-quickhelp)?

It would also be good to improve integration with yasnippet as I don't feel I'm making the best use there.

#+BEGIN_SRC emacs-lisp
  (use-package company
    :diminish
    :config
    (add-hook 'after-init-hook 'global-company-mode)

    (setq company-idle-delay t))
#+END_SRC

I don't want suggestions from open files / buffers to be automatically lowercased as these are often camelcase function names.

#+BEGIN_SRC emacs-lisp
  (setq company-dabbrev-downcase nil)
#+END_SRC

Remove default company backends -> We only want the ones we need and we configure them with their related packages

#+BEGIN_SRC emacs-lisp
  (setq company-backends nil)
#+END_SRC
** Snippets

Unlike autocomplete which suggests words / symbols, snippets are pre-prepared templates which you fill in.

I'm using a community library (=[[https://github.com/AndreaCrotti/yasnippet-snippets]]=) with *lots* of ready made options, and have my own directory of custom snippets I've added. Not sure if I should unify these by forking =yasnippet-snippets=.

Type the shortcut and press =TAB= to complete, or =M-/= to autosuggest a snippet.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
      :diminish yas-minor-mode
      :config
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/yasnippet-snippets")
      (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
      (add-to-list 'yas-snippet-dirs "~/dotfiles/snippets")
      (yas-global-mode)
      (global-set-key (kbd "M-/") 'company-yasnippet))
#+END_SRC
** Markdown

Markdown support isn't built into Emacs, add it with =markdown-mode=.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
** C
Emacs has a great built in C/C++ mode, but we can improve on it with =irony-mode= for code completion via =libclang=.

#+BEGIN_SRC emacs-lisp
  (use-package irony
    :hook (c-mode . irony-mode))
#+END_SRC

Add company mode support.

#+BEGIN_SRC emacs-lisp
   (use-package company-irony
    :config
    (add-to-list 'company-backends 'company-irony))
#+END_SRC

Open .h files in c++-mode

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))
#+END_SRC

Indent with width 4 and use clang formatting for auto-formatting on save

#+BEGIN_SRC emacs-lisp
  (use-package clang-format
    :config
    (defun my-formatting-setup()
      (global-set-key (kbd "C-c l") 'clang-format-buffer)
      (setq-default tab-width 4)
      (setq tab-width 4)
      (setq c-basic-offset 4))

    (add-hook 'c-mode-hook #'my-formatting-setup)
    (add-hook 'c++-mode-hook #'my-formatting-setup)
  (add-hook 'c++-mode-hook
            (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil 'local))))
#+END_SRC

** Indexing

#+BEGIN_SRC emacs-lisp
  (use-package rtags
    :config 
    (define-key c-mode-base-map (kbd "M-.")
      (function rtags-find-symbol-at-point))
    (define-key c-mode-base-map (kbd "M-,")
      (function rtags-find-references-at-point))
    (define-key c-mode-base-map (kbd "M-#")
      (function rtags-find-symbol-current-file))
    (rtags-enable-standard-keybindings)
    (setq rtags-autostart-diagnostics t)
    (rtags-diagnostics)

    (global-set-key (kbd "<M-up>") 'rtags-previous-match)
    (global-set-key (kbd "<M-down>") 'rtags-next-match)
    (global-set-key (kbd "<M-left>") 'rtags-location-stack-back)
    (global-set-key (kbd "<M-right>") 'rtags-location-stack-forward))
#+END_SRC

Add company mode support.

#+BEGIN_SRC emacs-lisp
  (use-package company-rtags
    :config
    (add-to-list 'company-backends 'company-rtags))
#+END_SRC

Add flycheck support

#+BEGIN_SRC emacs-lisp
  (use-package flycheck-rtags
    :config
    (defun my-flycheck-rtags-setup ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
      (setq-local flycheck-check-syntax-automatically nil))
    (add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
    (add-hook 'c++-mode-hook #'my-flycheck-rtags-setup)
    (add-hook 'objc-mode-hook #'my-flycheck-rtags-setup))
#+END_SRC

** CMake
#+BEGIN_SRC emacs-lisp
  (use-package cmake-mode)
#+END_SRC

* Org
** General settings.

#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented 'f)
  (setq org-directory "~/org")
  (setq org-special-ctrl-a/e 't)
  (setq org-default-notes-file (concat org-directory "/notes.org"))
  (setq org-src-fontify-natively 't)
  (setq org-src-tab-acts-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (defun find-todo ()
    "Edit todo.org"
    (interactive)
    (find-file "~/org/todo.org"))

  (global-set-key (kbd "C-c T") 'find-todo)
#+END_SRC

** Appearance

Improve the display of bullet points.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :config
    (setq org-bullets-bullet-list '("∙"))
    (add-hook 'org-mode-hook 'org-bullets-mode))
#+END_SRC

Customize appearance.

#+BEGIN_SRC emacs-lisp
  (let*
      ((variable-tuple (cond
                        ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                        ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                        ((x-list-fonts "Verdana")         '(:font "Verdana"))
                        ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                        (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
       (base-font-color     (face-foreground 'default nil 'default))
       (headline           `(:inherit default :weight normal :foreground ,base-font-color)))

    (custom-theme-set-faces 'user
                            `(org-level-8 ((t (,@headline ,@variable-tuple))))
                            `(org-level-7 ((t (,@headline ,@variable-tuple))))
                            `(org-level-6 ((t (,@headline ,@variable-tuple))))
                            `(org-level-5 ((t (,@headline ,@variable-tuple))))
                            `(org-level-4 ((t (,@headline ,@variable-tuple))))
                            `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.33))))
                            `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.33))))
                            `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.33 ))))
                            `(org-document-title ((t (,@headline ,@variable-tuple :height 1.33 :underline nil))))))
#+END_SRC

* PlantUML
#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode)
  ;; active Org-babel languages
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(;; other Babel languages
     (plantuml . t)))
  (setq org-plantuml-jar-path
        (expand-file-name "~/plantuml.jar"))
  (add-hook 'org-babel-after-execute-hook
            (lambda ()
              (when org-inline-image-overlays
                (org-redisplay-inline-images))))
#+END_SRC
